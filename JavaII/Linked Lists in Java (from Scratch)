/** 
 * ---------------------------------------------------------------------------------------------
 * 	Description : This program executes a simple enqueue and dequeue function of linked lists. 
 * 
 	Edited by: Obiahu, Idam
 	
 	Name: Obiahu, Idam
 	Course: COSC 1437 Programming Fundamentals II
 *
 * ---------------------------------------------------------------------------------------------
 **/


/** 
 * ---------------------------------------------------------------------------------------------
 * This class is used as an object of the SimpleQueue class
 * 
 * ---------------------------------------------------------------------------------------------
 **/
class Integer {
   public int value = 0;            // stores an integer value
   Integer next = null ;            // used to point to the next Integer object in the queue
		   
   // constructor is responsible for initializing the member variable value
   public Integer(int value) {
      this.value = value;
   }
}

/** 
 * ---------------------------------------------------------------------------------------------
 * The class implements a simple queue order based on linked list. 
 * 
 * ---------------------------------------------------------------------------------------------
 **/
public class SimpleQueue {
   Integer front = null;                // points to the first element of the queue
   Integer prev  = null;                // points to the last element of the queue
   
   /** 
    * ---------------------------------------------------------------------------------------------
    * Creates an element of Integer and add it to the queue 
    *
    * ---------------------------------------------------------------------------------------------
    **/   
   public void enQueue(int value) {
	   Integer list = new Integer(value);	//creates a new object for the node

	 /* base case for the first element */
	   if (front == null)					
           front = prev = list;				//both the first node and the current node are set to the first element
     //NOTE: New objects of type "Integer" point to null by default, so no need to explicitly set list.next to null
	 
	 /* If the new element to be added isn't first */
	   else
       {
           prev.next = list; 	//the last element references the new object
           prev = list;			//the current node is set to the newly created object (which, in turn, has a list.next value of null) 
       }
   }
   
   /** 
    * ---------------------------------------------------------------------------------------------
    * Fetches an Integer object and remove that object from the queue. 
    * 
    * Edit: In this method, a integers are removed, one after the other, by moving the references to null
    * until the "first" node makes a reference to null.  
    *
    * ---------------------------------------------------------------------------------------------
    **/   
   public int deQueue() {
	   /* If there is no element in the linked list*/
	   if(front == null)
	   {
		   System.out.println("You can't dequeue an empty list!");		// Scream at the user for being careless
		   return 0;
	   }
	   
	   Integer list = front; 			// creates a new object to reference to the first node
	   front = front.next;				// change the position of the reference element to the next element in the list
	   return list.value;				// return the value of the dereferenced element
	   }

   /** 
    * ---------------------------------------------------------------------------------------------
    * Returns true if the queue is empty; otherwise, false
    *
    * ---------------------------------------------------------------------------------------------
    **/      
   public boolean isEmpty() {
      if (front == null)
         return true;
      else
         return false;
   }
   
   /** 
    * ---------------------------------------------------------------------------------------------
    * An entry point for program execution
    * ---------------------------------------------------------------------------------------------
    **/      
   public static void main(String[] args) {
         // performs enqueue operations
      SimpleQueue q = new SimpleQueue();
      for (int i=1; i < 10; i++) {
         q.enQueue(i * 200);
      }
       
         // performs dequeue operations
      while ( !q.isEmpty() ) {
        System.out.println( "Queue:\t" + q.deQueue());       
      }

      }

}


